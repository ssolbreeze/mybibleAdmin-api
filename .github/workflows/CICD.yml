name: CICD - Build and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Github Repository에서 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v4

    # env 파일에서 변수 가져오기
    - name: Load environment variables
      run: |
        set -o allexport
        source ./deploy-config.env
        set +o allexport
        echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
        echo "PORT=$PORT" >> $GITHUB_ENV

    - name: Check environment variables
      run: |
        echo "PROJECT_NAME is $PROJECT_NAME"
        echo "PORT is $PORT"
        echo "PROJECT_NAME is ${{ env.PROJECT_NAME }}"
        echo "PORT is ${{ env.PORT }}"

    # install java
    - name: Install JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Github secret을 사용해 application-secret.yml 파일 생성
    - name: Create application-scret.yml
      run: |
        echo "${{ secrets.APPLICATION_SECRET }}" | base64 --decode > ./src/main/resources/application-secret.yml

    # gradle build
    - name: Build with Gradle
      run: |
        chmod 777 ./gradlew
        ./gradlew clean build -x test
        chmod -R 777 ./build/libs

    # docker 이미지를 빌드하고 tar 파일로 저장
    - name: Build Docker image
      run: |
        docker build -t $PROJECT_NAME .
        docker save -o ./$PROJECT_NAME.tar $PROJECT_NAME
        chmod 664 $PROJECT_NAME.tar

    # 비드한 도커 이미지 파일을 EC2로 전송 (SCP 사용)
    - name: Transfer Docker image to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: ./${PROJECT_NAME}.tar
        target: /home/ubuntu

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # EC2에서 도커 이미지 로드 및 컨테이너 실행
    - name: Deploy Docker container on EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # 기존 컨테이너 종료 및 삭제
          sudo docker stop ${PROJECT_NAME} || true
          sudo docker rm ${PROJECT_NAME} || true

          # 도커 이미지 로드
          sudo docker load -i /home/ubuntu/${PROJECT_NAME}.tar

          # 도커 컨테이너 실행
          sudo docker run -d \
            --name ${PROJECT_NAME} \
            -p ${PORT}:${PORT} \
            mybibleadmin-api
    
        
